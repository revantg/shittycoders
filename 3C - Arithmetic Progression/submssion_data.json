{"submission_stats": [{"date_time": "", "submission_id": "41256178", "problem_name": "C - Arithmetic Progression", "submission_link": "http://codeforces.com/contest/382/submission/41256178", "participant_id": "19003121", "contest_url": "http://codeforces.com/contest/382/problem/C", "submission_lang": "GNU C++14", "time_consumed": "218\u00a0ms", "memory_consumed": "2200\u00a0KB", "submission_verdict": "OK", "submission_verdict_text": "Accepted", "problem_id": ["382", "C"]}], "submissionid": "41256178", "problem_name": "C - Arithmetic Progression", "language": "GNU C++14", "verdict": "Accepted", "time_taken": ["218 ms"], "memory": "2160 KB", "submitted_time": "2018-08-05 23:25:28", "judged_time": "2018-08-05 23:25:28", "program": ["#include <bits/stdc++.h>\r\nusing namespace std;\r\nint main()\r\n{\r\n    int n; cin >> n;\r\n    if (n == 1) return cout << -1, 0;\r\n    vector <int> v(n);\r\n    for (int i = 0; i < n; i++)\r\n        cin >> v[i];\r\n    sort(v.begin(), v.end());\r\n    map<int, vector <int> > pos;\r\n    for(int i = 1; i < n; i++)\r\n    { \r\n        pos[v[i] - v[i - 1]].push_back(i);\r\n    }\r\n    if (pos.size() > 2) return cout << 0, 0;\r\n    if (v[1] == v[0] and pos.size() == 1) return cout << \"1\\n\" << v[0], 0;\r\n    if (n == 2)\r\n    {\r\n        if (v[1] - v[0] % 2 == 1)\r\n            cout << 2 << '\\n' << v[0] - (v[1] - v[0]) << \" \" << v[1] + (v[1] - v[0]);\r\n        else \r\n        {\r\n            int d = v[1] - v[0];\r\n            if (abs(d) % 2 == 0)\r\n                cout << 3 << '\\n' << v[0] - (v[1] - v[0]) << \" \" << (v[0] + v[1]) / 2  << \" \" << v[1] + (v[1] - v[0]);\r\n            else    \r\n                cout << \"2\\n\" << v[0] - d << \" \" << v[1] + d;\r\n            return(0);\r\n        }\r\n    }\r\n    int pos1, d1 = -1, d2;\r\n    vector <int> pos2;\r\n    if (pos.size() == 2 and n != 3)\r\n    {\r\n        for(auto x : pos)\r\n        {\r\n            if (x.second.size() == 1 and d1 == -1)\r\n                pos1 = x.second[0], d1 = x.first;\r\n            else\r\n                pos2 = x.second, d2 = x.first;\r\n        }\r\n        int t3 = v[pos1];\r\n        if (d2 != 0 and d1 / d2 == 2)\r\n            cout << \"1\\n\" << t3 - d2;\r\n        else    \r\n            cout << 0;\r\n        return(0);\r\n    }\r\n    if (pos.size() == 1)   \r\n    {\r\n        int d = v[1] - v[0];\r\n        cout << \"2\\n\" << v[0] - d << \" \" << v[n-1] + d;\r\n        return 0;\r\n    }\r\n    if (n == 3)\r\n    {\r\n        int d1 = v[1] - v[0], d2 = v[2] - v[1];\r\n        if (d2 != 0 and d1 / d2 == 2) return cout << \"1\\n\" << v[0] + d2, 0;\r\n        else if (d1 != 0 and d2 / d1 == 2) return cout << \"1\\n\" << v[2] - d1, 0;\r\n        cout << 0;\r\n        return 0;\r\n    }\r\n}\r\n        // if (pos2.size() == 1)\r\n        // {\r\n        //     int t1 = v[pos2[0] - 1], t2 = v[pos2[0]], t3 = v[pos1];\r\n        //     int e1 = max(max(t1,t2), t3);\r\n        //     int e3 = min(min(t1,t2), t3);\r\n        //     int e2;\r\n        //     if (e1 != t1 and e3 != t1) e2 = t1;\r\n        //     else if (e1 != t2 and e3 != t2) e2 = t2;\r\n        //     else if (e1 != t3 and e3 != t3) e2 = t3;\r\n        //     if ((e2 - e1) > (e3 - e2) and (e2 - e1) / (e3 - e2) == 2)\r\n        //         cout << \"1\\n\" << e1 + e3 - e2;\r\n        //     else if ((e3 - e2) > (e2 - e1) and (e3 - e2) / (e2 - e1) == 2)\r\n        //         cout << \"1\\n\" << e2 + e2 - e1;\r\n        //     else \r\n        //         cout << \"0\";\r\n        //     return(0);\r\n        // }\r\n        // else \r\n        // {\r\n        // }"], "testcases_data": [{"test_no": "1\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "3\r\n4 1 7\r\n", "output_data": "2\r\n-2 10", "correct_answer": "2\r\n-2 10\r\n", "comment": "ok 3 number(s): \"2 -2 10\"\r\n", "Time": ": 15 ms, ", "memory": ": 4 KB"}, {"test_no": "2\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "1\r\n10\r\n", "output_data": "-1", "correct_answer": "-1\r\n", "comment": "ok 1 number(s): \"-1\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "3\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "4\r\n1 3 5 9\r\n", "output_data": "1\r\n7", "correct_answer": "1\r\n7\r\n", "comment": "ok 2 number(s): \"1 7\"\r\n", "Time": ": 0 ms, ", "memory": ": 8 KB"}, {"test_no": "4\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "4\r\n4 3 4 5\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "5\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "2\r\n2 4\r\n", "output_data": "3\r\n0 3 6", "correct_answer": "3\r\n0 3 6\r\n", "comment": "ok 4 number(s): \"3 0 3 6\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "6\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "4\r\n1 3 4 5\r\n", "output_data": "1\r\n2", "correct_answer": "1\r\n2\r\n", "comment": "ok 2 number(s): \"1 2\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "7\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "2\r\n3 3\r\n", "output_data": "1\r\n3", "correct_answer": "1\r\n3\r\n", "comment": "ok 2 number(s): \"1 3\"\r\n", "Time": ": 0 ms, ", "memory": ": 0 KB"}, {"test_no": "8\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "2\r\n13 2\r\n", "output_data": "2\r\n-9 24", "correct_answer": "2\r\n-9 24\r\n", "comment": "ok 3 number(s): \"2 -9 24\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "9\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "5\r\n2 2 2 2 2\r\n", "output_data": "1\r\n2", "correct_answer": "1\r\n2\r\n", "comment": "ok 2 number(s): \"1 2\"\r\n", "Time": ": 0 ms, ", "memory": ": 0 KB"}, {"test_no": "10\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "6\r\n11 1 7 9 5 13\r\n", "output_data": "1\r\n3", "correct_answer": "1\r\n3\r\n", "comment": "ok 2 number(s): \"1 3\"\r\n", "Time": ": 30 ms, ", "memory": ": 0 KB"}, {"test_no": "11\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "2\r\n100000000 1\r\n", "output_data": "2\r\n-99999998 199999999", "correct_answer": "2\r\n-99999998 199999999\r\n", "comment": "ok 3 number(s): \"2 -99999998 199999999\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "12\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "5\r\n2 3 1 4 6\r\n", "output_data": "1\r\n5", "correct_answer": "1\r\n5\r\n", "comment": "ok 2 number(s): \"1 5\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "13\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "5\r\n1 2 2 3 4\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 0 ms, ", "memory": ": 4 KB"}, {"test_no": "14\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "3\r\n1 4 2\r\n", "output_data": "1\r\n3", "correct_answer": "1\r\n3\r\n", "comment": "ok 2 number(s): \"1 3\"\r\n", "Time": ": 15 ms, ", "memory": ": 4 KB"}, {"test_no": "15\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "3\r\n8 8 8\r\n", "output_data": "1\r\n8", "correct_answer": "1\r\n8\r\n", "comment": "ok 2 number(s): \"1 8\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "16\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "5\r\n2 2 2 2 3\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 0 ms, ", "memory": ": 0 KB"}, {"test_no": "17\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "1\r\n100000000\r\n", "output_data": "-1", "correct_answer": "-1\r\n", "comment": "ok 1 number(s): \"-1\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "18\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "20\r\n27 6 3 18 54 33 9 15 39 12 57 48 21 51 60 30 24 36 42 45\r\n", "output_data": "2\r\n0 63", "correct_answer": "2\r\n0 63\r\n", "comment": "ok 3 number(s): \"2 0 63\"\r\n", "Time": ": 0 ms, ", "memory": ": 0 KB"}, {"test_no": "19\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "40\r\n100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000\r\n", "output_data": "1\r\n100000000", "correct_answer": "1\r\n100000000\r\n", "comment": "ok 2 number(s): \"1 100000000\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "20\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "49\r\n81787 163451 104059 89211 96635 133755 148603 141179 159739 122619 123 144891 70651 11259 63227 3835 44667 37243 100347 26107 137467 18683 156027 59515 22395 40955 111483 52091 7547 85499 107771 178299 115195 152315 74363 126331 33531 130043 14971 48379 167163 182011 170875 78075 174587 55803 66939 29819 118907\r\n", "output_data": "1\r\n92923", "correct_answer": "1\r\n92923\r\n", "comment": "ok 2 number(s): \"1 92923\"\r\n", "Time": ": 31 ms, ", "memory": ": 0 KB"}, {"test_no": "21\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "99\r\n99999980 99999982 99999991 99999933 99999951 99999962 99999997 99999912 99999938 99999936 99999930 99999981 99999940 99999992 99999950 99999959 99999996 99999979 99999957 99999907 99999948 99999987 99999911 99999928 99999974 99999955 99999953 99999920 99999947 99999917 99999901 99999969 99999949 99999952 99999925 99999937 99999995 99999914 99999963 99999975 99999998 99999918 99999908 99999926 99999988 99999935 99999990 99999941 99999910 99999923 99999956 99999916 99999934 99999964 99999943 99999944 100...", "output_data": "1\r\n99999922", "correct_answer": "1\r\n99999922\r\n", "comment": "ok 2 number(s): \"1 99999922\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "22\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "298\r\n21900 17700 17800 16300 17100 3400 10200 24000 23900 22300 24100 26100 5900 2100 6600 29200 2400 6200 8700 23300 400 12300 25600 13700 3200 1400 25500 26400 18900 21000 11000 25200 27400 10600 5500 3300 20800 15400 23200 21200 16800 8300 15800 27700 8900 19500 23400 17200 2500 5700 21600 1700 23000 24700 25700 4600 23500 19900 12600 19400 26800 27200 4200 1500 29100 28200 11400 21500 13300 13200 28100 30000 27800 25000 15500 1300 18300 11800 2000 4500 27300 29300 11900 23800 2200 16200 18600 20100 134...", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 15 ms, ", "memory": ": 8 KB"}, {"test_no": "23\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "100000\r\n110054 5902 126582 26880 89164 128858 181106 17582 127868 15696 157476 101634 59206 47036 157126 100488 195738 123110 126472 64000 96964 10242 116650 115356 157060 78842 20728 61940 195456 177006 116348 45658 59708 32832 190352 173770 59292 32862 92254 31806 125956 79532 141638 12224 33378 134388 188828 159822 105970 130810 118830 18998 172304 33480 191026 180954 50026 125796 163750 152288 85702 60540 83358 41966 100712 149946 159090 188444 134900 169782 82764 14736 15596 59660 146288 168552 121952...", "output_data": "2\r\n0 200002", "correct_answer": "2\r\n0 200002\r\n", "comment": "ok 3 number(s): \"2 0 200002\"\r\n", "Time": ": 140 ms, ", "memory": ": 1440 KB"}, {"test_no": "24\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "99999\r\n132352 93890 195864 127996 102130 65552 107994 68468 45204 103568 79876 110694 131648 176846 64438 32144 144508 67962 53018 186780 156700 54088 149192 160738 30226 155470 80004 13578 130240 157314 190380 73392 37584 132392 119348 46854 2492 37064 44474 156308 34490 116218 86102 112036 125206 46524 72114 166822 72342 77192 141646 169438 154914 167474 172150 66052 46214 106240 92702 296 156934 151384 35802 6450 181416 71180 141318 93936 118032 196318 4780 21014 156870 54790 25168 142164 193580 30248 9...", "output_data": "1\r\n34742", "correct_answer": "1\r\n34742\r\n", "comment": "ok 2 number(s): \"1 34742\"\r\n", "Time": ": 156 ms, ", "memory": ": 1712 KB"}, {"test_no": "25\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "99998\r\n217978 182650 47810 224402 346554 761618 241642 501882 416330 499770 583994 304650 227530 393474 502738 144370 201634 615330 138242 362818 679794 566082 19730 483938 145746 252626 220042 460162 185914 698962 723434 580714 594266 668194 616674 251434 212770 238290 729242 647578 769034 558370 274698 301386 26122 522418 632442 507930 20242 148834 5994 756546 151714 230562 36002 702714 539922 155506 270426 572090 243650 292914 316050 627994 96978 251170 217378 160786 205994 408458 313962 705210 166034 5...", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 156 ms, ", "memory": ": 1712 KB"}, {"test_no": "26\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "99980\r\n1068068 690724 1353412 313172 899988 1004916 1585156 1350084 763700 1117476 294564 1211860 875124 1093188 1481908 956772 1224836 794212 1451924 985988 42564 553572 605396 1425956 631492 560276 719876 1183604 89156 461908 756740 1340564 38788 1016468 649524 368468 1118628 807012 1100596 1357028 841028 667796 306164 792420 872164 1471380 1352884 1557124 78676 1424228 544148 1532916 1277076 954404 1215860 29668 205044 1036420 1327956 644980 107620 759940 837444 1034484 490884 284836 828084 767412 36708...", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 171 ms, ", "memory": ": 1704 KB"}, {"test_no": "27\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "90000\r\n116706 23084 49374 160260 53612 28044 114086 39172 5418 171562 159798 131698 164456 68024 171758 60360 34604 51608 180126 178116 156886 130754 157206 67646 194084 61754 117142 181056 153864 40154 65680 7480 73466 92396 180800 159226 189144 22858 72362 162848 36648 125672 6674 62610 55462 23426 196378 89164 142548 170740 125022 175004 154798 198566 150708 21670 175394 174324 16022 192154 72922 117892 24812 16512 171942 180528 10108 22072 8452 67942 94612 59450 80860 80626 159070 63274 200074 143432 1...", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 124 ms, ", "memory": ": 1536 KB"}, {"test_no": "28\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "99999\r\n290460 1626270 1574946 1323954 1093752 1678287 703593 2014455 60342 806997 1722030 899502 1011075 803217 709872 1405287 941754 186552 1519842 751788 362805 1771632 140583 515328 1922139 635658 883626 822201 1139595 2128443 537420 792381 2027454 1580952 945093 856872 1662390 1510707 754602 1200411 1057170 1889841 1336197 868296 691056 1063281 782091 1780683 926634 1139742 942237 1631331 278742 300204 2015694 1698111 259275 1154043 1695276 680220 1047069 132078 2031738 35268 1209966 1650567 2009373 73...", "output_data": "1\r\n1579104", "correct_answer": "1\r\n1579104\r\n", "comment": "ok 2 number(s): \"1 1579104\"\r\n", "Time": ": 171 ms, ", "memory": ": 1712 KB"}, {"test_no": "29\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "99999\r\n15218750 1247784 16682838 15309220 4556370 9085756 14853382 17706130 9043246 20720634 9838292 6494390 3807976 5372344 13420468 12186588 5500528 1048314 6079536 21636670 19315406 4889910 18513384 11332900 11887928 12266376 14946250 11144766 6025908 11429256 13597048 1265660 19573954 13571542 14401904 933646 8746112 11073480 19323472 8048512 5062348 9599582 10383510 20881736 6890932 12770392 11754730 16060666 575690 18966824 16795762 20510482 12314336 15061572 7479096 3875120 7937986 20382516 9589336 ...", "output_data": "1\r\n205744", "correct_answer": "1\r\n205744\r\n", "comment": "ok 2 number(s): \"1 205744\"\r\n", "Time": ": 187 ms, ", "memory": ": 1708 KB"}, {"test_no": "30\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "99999\r\n97927000 94392400 95387000 91508900 96920100 97417400 90572600 96712700 93069900 94736800 97355300 93777800 94870300 93303200 91473000 93428300 92187500 92173200 94057200 96999300 90880600 92699000 94779500 95019400 95652000 92106100 94242800 93234700 90095000 93800400 97432200 93339000 96386700 98077700 99182700 98870300 90458200 90693600 96692900 91139200 94069100 98835300 92416800 92730100 98888200 91136700 99868000 90508300 97613000 97526100 95704600 94030700 94245200 92330100 91798800 96826600 ...", "output_data": "1\r\n97952200", "correct_answer": "1\r\n97952200\r\n", "comment": "ok 2 number(s): \"1 97952200\"\r\n", "Time": ": 171 ms, ", "memory": ": 1712 KB"}, {"test_no": "31\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "100000\r\n66256000 83206000 99841000 50660000 45189000 68084000 23454000 10457000 83382000 6530000 95788000 92686000 39870000 46455000 42454000 73423000 78600000 5108000 10654000 92326000 44563000 40439000 2957000 28456000 47984000 16002000 14323000 26406000 89057000 7923000 41029000 15440000 6081000 88828000 74094000 61347000 12389000 1250000 79986000 51198000 23359000 21264000 37229000 26921000 72353000 26483000 36781000 28210000 62332000 68695000 14458000 83733000 19847000 24395000 223000 86580000 3698500...", "output_data": "2\r\n0 100001000", "correct_answer": "2\r\n0 100001000\r\n", "comment": "ok 3 number(s): \"2 0 100001000\"\r\n", "Time": ": 218 ms, ", "memory": ": 1432 KB"}, {"test_no": "32\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "999\r\n57931278 19631278 20431278 81131278 81031278 91931278 77331278 20331278 25931278 20731278 70831278 19231278 56531278 831278 80431278 59331278 13631278 72731278 42331278 9831278 38231278 56331278 34431278 77831278 89131278 38031278 5131278 53231278 50131278 91631278 98231278 93431278 84831278 76331278 81731278 27831278 95631278 27931278 59931278 40731278 28531278 80331278 16431278 8531278 12231278 60731278 16731278 51131278 88631278 70931278 27031278 76931278 21431278 76231278 81631278 72831278 6463127...", "output_data": "1\r\n61331278", "correct_answer": "1\r\n61331278\r\n", "comment": "ok 2 number(s): \"1 61331278\"\r\n", "Time": ": 15 ms, ", "memory": ": 20 KB"}, {"test_no": "33\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "100000\r\noutput_data": "1\r\n9999999", "correct_answer": "1\r\n9999999\r\n", "comment": "ok 2 number(s): \"1 9999999\"\r\n", "Time": ": 171 ms, ", "memory": ": 1436 KB"}, {"test_no": "34\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "9999\r\n73860000 91990000 76280000 47880000 4090000 40880000 37280000 88470000 72300000 63220000 31090000 56800000 64760000 3280000 55820000 87320000 86570000 60320000 37770000 35500000 79650000 72790000 64540000 11810000 11290000 41480000 16440000 14030000 65540000 61870000 88960000 73260000 21090000 39010000 88900000 51010000 20210000 21170000 71950000 91970000 92710000 13080000 18060000 80370000 93960000 4940000 43180000 14420000 88650000 69550000 75730000 35040000 84630000 97500000 65100000 47100000 3054...", "output_data": "1\r\n54060000", "correct_answer": "1\r\n54060000\r\n", "comment": "ok 2 number(s): \"1 54060000\"\r\n", "Time": ": 15 ms, ", "memory": ": 220 KB"}, {"test_no": "35\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "9\r\n1 2 3 3 4 4 5 5 6\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 15 ms, ", "memory": ": 4 KB"}, {"test_no": "36\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "7\r\n1 1 2 3 4 5 6\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "37\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "2\r\n4 1\r\n", "output_data": "2\r\n-2 7", "correct_answer": "2\r\n-2 7\r\n", "comment": "ok 3 number(s): \"2 -2 7\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "38\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "2\r\n2 100000000\r\n", "output_data": "3\r\n-99999996 50000001 199999998", "correct_answer": "3\r\n-99999996 50000001 199999998\r\n", "comment": "ok 4 number(s): \"3 -99999996 50000001 199999998\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "39\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "8\r\n1 2 3 4 11 12 13 14\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "40\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "7\r\n5 40 45 50 55 60 65\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 0 ms, ", "memory": ": 0 KB"}, {"test_no": "41\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "1\r\n1\r\n", "output_data": "-1", "correct_answer": "-1\r\n", "comment": "ok 1 number(s): \"-1\"\r\n", "Time": ": 0 ms, ", "memory": ": 0 KB"}, {"test_no": "42\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "2\r\n1 1\r\n", "output_data": "1\r\n1", "correct_answer": "1\r\n1\r\n", "comment": "ok 2 number(s): \"1 1\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "43\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "2\r\n100000000 2\r\n", "output_data": "3\r\n-99999996 50000001 199999998", "correct_answer": "3\r\n-99999996 50000001 199999998\r\n", "comment": "ok 4 number(s): \"3 -99999996 50000001 199999998\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "44\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "10000\r\n1 2 4 7 11 16 22 29 37 46 56 67 79 92 106 121 137 154 172 191 211 232 254 277 301 326 352 379 407 436 466 497 529 562 596 631 667 704 742 781 821 862 904 947 991 1036 1082 1129 1177 1226 1276 1327 1379 1432 1486 1541 1597 1654 1712 1771 1831 1892 1954 2017 2081 2146 2212 2279 2347 2416 2486 2557 2629 2702 2776 2851 2927 3004 3082 3161 3241 3322 3404 3487 3571 3656 3742 3829 3917 4006 4096 4187 4279 4372 4466 4561 4657 4754 4852 4951 5051 5152 5254 5357 5461 5566 5672 5779 5887 5996 6106 6217 6329 64...", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 31 ms, ", "memory": ": 768 KB"}, {"test_no": "45\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "100000\r\n1 2 4 7 11 16 22 29 37 46 56 67 79 92 106 121 137 154 172 191 211 232 254 277 301 326 352 379 407 436 466 497 529 562 596 631 667 704 742 781 821 862 904 947 991 1036 1082 1129 1177 1226 1276 1327 1379 1432 1486 1541 1597 1654 1712 1771 1831 1892 1954 2017 2081 2146 2212 2279 2347 2416 2486 2557 2629 2702 2776 2851 2927 3004 3082 3161 3241 3322 3404 3487 3571 3656 3742 3829 3917 4006 4096 4187 4279 4372 4466 4561 4657 4754 4852 4951 5051 5152 5254 5357 5461 5566 5672 5779 5887 5996 6106 6217 6329 6...", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 171 ms, ", "memory": ": 2160 KB"}, {"test_no": "46\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "3\r\n2 2 3\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 0 ms, ", "memory": ": 0 KB"}, {"test_no": "47\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "5\r\n1 3 5 9 13\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 0 ms, ", "memory": ": 4 KB"}, {"test_no": "48\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "5\r\n1 2 4 8 16\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 30 ms, ", "memory": ": 0 KB"}, {"test_no": "49\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "3\r\n2 2 5\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "50\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "5\r\n1 2 3 4 8\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "51\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "3\r\n1 3 4\r\n", "output_data": "1\r\n2", "correct_answer": "1\r\n2\r\n", "comment": "ok 2 number(s): \"1 2\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "52\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "5\r\n1 2 4 6 7\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 15 ms, ", "memory": ": 4 KB"}, {"test_no": "53\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "4\r\n1 5 9 11\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "54\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "4\r\n3 4 5 9\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "55\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "4\r\n1 5 6 8\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 0 ms, ", "memory": ": 0 KB"}, {"test_no": "56\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "100000\r\n1 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 102 104 106 108 110 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 144 146 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 180 182 184 186 188 190 192 194 196 198 200 202 204 206 208 210 212 214 216 218 220 222 224 226 228 230 232 234 236 238 240 242 244 246 248 250 252 254 256 258 260 262 264 266 268 270 272 274 276 278 ...", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 124 ms, ", "memory": ": 1444 KB"}, {"test_no": "57\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "4\r\n2 6 8 12\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "58\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "5\r\n1 2 3 5 7\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}, {"test_no": "59\r\n            ", "testcase_verdict": "Verdict: OK", "input_data": "6\r\n1 2 3 4 6 8\r\n", "output_data": "0", "correct_answer": "0\r\n", "comment": "ok 1 number(s): \"0\"\r\n", "Time": ": 15 ms, ", "memory": ": 0 KB"}], "username": "ltra_golu"}